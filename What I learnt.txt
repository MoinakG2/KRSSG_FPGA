I learnt a lot from the  FPGA task. I learnt to use the integrated developement environment Xilinx and to code in Verilog. First, I made a 4-bit counter and then extended to a 7-bit version. In the circuit, I used logic gates coupled with T-flip-flops to generate an up-counting clock sequence. I used an asynchronous counter but I also implemented the synchronous version. I learnt to simulate the code and observe the behaviiour of my circuit using the simulator. It is a great tool to analyse mistakes in the circuit and it helped a lot. While designing the counter, one problem I faced was to count upto a certain value. My circuit was counting up to a certain value but was not getting reset to its base value. For that, I used an AND gate to which the inputs were those from the counter flip-flops and added that to the condition for resetting. After that my circuit worked fine. Next, I made 2 verilog test benches to run the BLDC in both directions using 7-bit PWM and 1-bit for assigning direction. Initially, even my simulation was not working as there were lots of syntax errors. I resolved them by reading answers on Stack Exchange. I learnt the difference between wire and register and understood when to use what. After all this my simulation worked perfectly but on physical testing it did not. My motor was drawing a lot of current and though the motor was spinning in both directions I could not see a visible change in the speed. For this I implemented frequency division. I divided the clock frequency by 256 and then my motor worked perfectly fine. I also learnt how to use the Mimas Spartan 6 board and to tweak the configuration file.
